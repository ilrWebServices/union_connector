<?php

/**
 * @file
 * Contains union_organizer.module.
 */

use Drupal\Core\Serialization\Yaml;

/**
 * Implements hook_library_info_build().
 *
 * Add dynamic library definitions for Union components.
 *
 * @return array[]
 *   An array of library definitions to register, keyed by library ID. The
 *   library ID will be prefixed with the module name automatically.
 *
 * @see core.libraries.yml
 * @see hook_library_info_alter()
 */
function union_organizer_library_info_build() {
  $libraries = [];

  $union_libraries = file_scan_directory('libraries/union/source/', '/.*\.libraries.yml$/', ['key' => 'filename']);

  // Normalize each Union component library into a usable Drupal library. This
  // involves fixing the .css and .js paths and prefixing the dependencies.
  foreach ($union_libraries as $union_library) {
    $file_path = $union_library->uri;
    $library = Yaml::decode(file_get_contents($file_path));

    $library_name = basename($union_library->name, '.libraries');

    if (isset($library['css'])) {
      foreach ($library['css'] as $file_name => $options) {
        unset($library['css'][$file_name]);

        $level = 'component';

        // Skin libraries should use the `base` level rather than `component`.
        // @see https://www.drupal.org/docs/8/creating-custom-modules/adding-stylesheets-css-and-javascript-js-to-a-drupal-8-module
        if (strpos($union_library->uri, 'source/skins') !== FALSE) {
          $level = 'base';
        }

        $library['css'][$level][
          \Drupal::request()->getBaseUrl() . '/' . dirname($file_path) . '/' . $file_name
        ] = $options;
      }
    }

    if (isset($library['js'])) {
      foreach ($library['js'] as $file_name => $options) {
        unset($library['js'][$file_name]);

        $library['js'][
          \Drupal::request()->getBaseUrl() . '/' . dirname($file_path) . '/' . $file_name
        ] = $options;
      }
    }

    if (isset($library['dependencies'])) {
      foreach ($library['dependencies'] as $key => $dep) {
        $library['dependencies'][$key] = 'union_organizer/' . $dep;
      }
    }

    // @todo Consider adding a namespace for skins (e.g. `skin-ilr`).
    $libraries[$library_name] = $library;
  }

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function union_organizer_theme() {
  $theme = [];
  $theme['union_styleguide'] = [
    'variables' => ['components' => '#components'],
  ];
  $theme['union_component'] = [
    'variables' => ['component' => '#component'],
  ];
  return $theme;
}
