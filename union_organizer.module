<?php

/**
 * @file
 * Contains union_organizer.module.
 */

use Drupal\Core\File\Exception\FileException;
use Drupal\Core\File\FileSystemInterface;
use Union\Components;

/**
 *  Implements hook_theme().
 */
function union_organizer_theme($existing, $type, $theme, $path) {
  return [
    'component_info' => [
      'variables' => [
        'label' => '',
        'description' => '',
        'url' => '',
        'template_vars' => '',
        'variations' => [],
        'reference_links' => '',
        'todos' => [],
        'deprecations' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 *
 * Add dynamic library definitions for Union components.
 *
 * @return array[]
 *   An array of library definitions to register, keyed by library ID. The
 *   library ID will be prefixed with the module name automatically.
 *
 * @see core.libraries.yml
 * @see hook_library_info_alter()
 */
function union_organizer_library_info_build() {
  $libraries = [];
  $path_base = 'public://union';
  $filesystem = \Drupal::service('file_system');
  $union_components = new Components;

  // Normalize each Union component library into a usable Drupal library. This
  // involves fixing the .css and .js paths and prefixing the dependencies.
  foreach ($union_components->getComponents() as $component) {
    $library = [];
    $library_id = preg_replace('/^_*/', '', $component->id());
    $path = $path_base . '/' . $component->id();
    $filesystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY);
    $css = $component->getCss();
    usort($css, function($a, $b) {
      return $a->getFilename() <=> $b->getFilename();
    });

    foreach ($css as $file) {
      $level = 'component';
      $uri = $path . '/' . $file->getBaseName();

      try {
        if (!$filesystem->copy($file->getRealPath(), $uri, FileSystemInterface::EXISTS_REPLACE)) {
          continue;
        }
      }
      catch (FileException $e) {
        continue;
      }

      // The _base library should use the `base` level rather than `component`.
      // @see https://www.drupal.org/docs/8/creating-custom-modules/adding-stylesheets-css-and-javascript-js-to-a-drupal-8-module
      if ($component->id() === '_base') {
        $level = 'base';
      }
      // Non-base libraries should have a dependency on base.
      else {
        // @todo Figure out a better way to add dependencies. Perhaps a custom phpdoc tag like @x-union-requires.
        $library['dependencies'][0] = 'union_organizer/base';
      }

      // The _ilr-base library should also use the `base` level, but it should
      // also get the base dependency.
      if ($component->id() === '_ilr-base') {
        $level = 'base';
      }

      // Layout libraries should use the `layout` level.
      // @see https://www.drupal.org/docs/8/creating-custom-modules/adding-stylesheets-css-and-javascript-js-to-a-drupal-8-module
      // if (strpos($union_library->uri, '/layouts/') !== FALSE) {
      //   $level = 'layout';
      // }

      $library['css'][$level][$uri] = [];
    }

    foreach ($component->getJs() as $file) {
      $uri = $path . '/' . $file->getBaseName();

      try {
        if (!$filesystem->copy($file->getRealPath(), $uri, FileSystemInterface::EXISTS_REPLACE)) {
          continue;
        }
      }
      catch (FileException $e) {
        continue;
      }

      $library['js'][$uri] = [];
    }

    foreach ($component->getFonts() as $file) {
      $subdir = str_replace(dirname($component->template->getRealPath()), '', dirname($file->getRealPath()));

      if ($subdir) {
        $fontpath = $path . $subdir;
        $filesystem->prepareDirectory($fontpath, FileSystemInterface::CREATE_DIRECTORY);
      }

      $uri = $path . $subdir . '/'. $file->getBaseName();

      try {
        if (!$filesystem->copy($file->getRealPath(), $uri, FileSystemInterface::EXISTS_REPLACE)) {
          continue;
        }
      }
      catch (FileException $e) {
        continue;
      }
    }

    if (!empty($library['css']) || !empty($library['js'])) {
      $libraries[$library_id] = $library;
    }
  }

  // Union images
  $imagepath = $path_base . '/images';
  $filesystem->prepareDirectory($imagepath, FileSystemInterface::CREATE_DIRECTORY);
  try {
    $filesystem->copy($union_components->getImagePath() . '/icons.svg', $imagepath . '/icons.svg', FileSystemInterface::EXISTS_REPLACE);
  }
  catch (FileException $e) {
  }

  return $libraries;
}

/**
 * Implements hook_cache_flush().
 */
function union_organizer_cache_flush() {
  if (is_dir('public://union')) {
    \Drupal::service('file_system')->deleteRecursive('public://union');
  }
}
